# Template with accumulation of possible strategies.  Just include the script "to enter" to the Entry AddOrder section and remove any lines that hide the strategies from the chart

################################## TRADING HOURS ##############################################

input marketOpenBuffer = 15;
input marketCloseBuffer = 30;
def   min_until_close = 
    (RegularTradingEnd(GetYYYYMMDD()) - GetTime()) / AggregationPeriod.MIN;
AddLabel(yes, "Minutes until close (mins): " + min_until_close);

def   min_from_open =
    (GetTime() - RegularTradingStart(GetYYYYMMDD())) / AggregationPeriod.MIN;
AddLabel(yes, "Mintues since the open:  " + min_from_open);

########### second time ##########################
input marketOpenBuffer2 = 15;
input marketCloseBuffer2 = 30;
def   min_until_close2 = 
    (RegularTradingEnd(GetYYYYMMDD()) - GetTime()) / AggregationPeriod.MIN;
AddLabel(yes, "Minutes until close (mins): " + min_until_close);

def   min_from_open2 =
    (GetTime() - RegularTradingStart(GetYYYYMMDD())) / AggregationPeriod.MIN;
AddLabel(yes, "Mintues since the open:  " + min_from_open);




############# Long, sell at market close ########
AddOrder(OrderType.SELL_TO_CLOSE, min_until_close <= 0, price = close, tickcolor = Color.RED, arrowcolor = Color.RED, name = "Sell/stop at Market Close");

####$######## Short, buy at market close ########
AddOrder(OrderType.BUY_TO_CLOSE, min_until_close <= 0, price = close, tickcolor = Color.GREEN, arrowcolor = Color.GREEN, name = "Buy/stop at Market Close");



################################## END TRADING HOURS ##########################################


################################## TRADE DIRECTION ############################################

# Configure if trades should be opened from long direction, short, or both.
# Default is both
input trade_direction = {default Both, Long, Short};
def   open_trade;
switch (trade_direction) {
case Both:
    open_trade = 2;
case Long:
    open_trade = 1;
case Short:
    open_trade = 0;
}
def open_longs = if open_trade == 2 or
    open_trade == 1 then 1
    else 0;
def open_shorts = if open_trade == 2 or
    open_trade == 0 then 1
    else 0;

################################## END TRADE DIRECTION ########################################


################################## POSITION SIZE ##############################################
def orderSize =
 if (GetSymbol() == "SPY") then 50
 else if (GetSymbol() == "QQQ") then 82
 else if (GetSymbol() == "/ES") then 1
 else if (GetSymbol() == "/NQ") then 1
 else 100;

################################## END POSITION SIZE ##########################################


################################## PROFIT TARGET ##############################################

# Are profit targets enabled
input enable_profit_target = {default Y, N};
def   p_target;
switch (enable_profit_target) {
case Y:
    p_target = 1;
case N:
    p_target = 0;
}

def profit_target =
 if (GetSymbol() == "SPY") then .50
 else if (GetSymbol() == "QQQ") then .32
 else if (GetSymbol() == "/ES") then 5
 else if (GetSymbol() == "/NQ") then 12.5
 else 1;

def long_target_price = EntryPrice() + profit_target;
def short_target_price = EntryPrice() - profit_target;

# Close trades when profit target is reached and close with the profit target as the price not the close of the bar
AddOrder(OrderType.SELL_TO_CLOSE, p_target == 1 and
    high >= long_target_price, price = long_target_price, name = "Profit Target", arrowcolor = Color.RED);

AddOrder(OrderType.BUY_TO_CLOSE, p_target == 1 and
    low <= short_target_price, price = short_target_price, name = "Profit Target", arrowcolor = Color.GREEN);

################################## END PROFIT TARGET ##########################################


################################## STOP LOSS  #################################################

# Are stop losses enabled
input enable_stop_loss = {default Y, N};
def   l_target;
switch (enable_stop_loss) {
case Y:
    l_target = 1;
case N:
    l_target = 0;
}

def stop_loss =
 if (GetSymbol() == "SPY") then .50
 else if (GetSymbol() == "QQQ") then .32
 else if (GetSymbol() == "/ES") then 5
 else if (GetSymbol() == "/NQ") then 12.5
 else 1;

def long_stop_price = EntryPrice() - stop_loss;
def short_stop_price = EntryPrice() + stop_loss;

# Close trades when stop loss is reached and close with the stop loss as the price not the close of the bar
AddOrder(OrderType.SELL_TO_CLOSE, l_target == 1 and
    low <= long_stop_price, price = long_stop_price, name = "Stop Loss", arrowcolor = Color.RED);

AddOrder(OrderType.BUY_TO_CLOSE, l_target == 1 and
    high >= short_stop_price, price = short_stop_price, name = "Stop Limit", arrowcolor = Color.GREEN);

################################## END STOP LOSS  #############################################


################################## TRAILING STOP  #############################################

# Are stop losses enabled
input enable_trail_stop = {default Y, N};
def   t_target;
switch (enable_trail_stop) {
case Y:
    t_target = 1;
case N:
    t_target = 0;
}

def trail_loss =
 if (GetSymbol() == "SPY") then .50
 else if (GetSymbol() == "QQQ") then .32
 else if (GetSymbol() == "/ES") then 5
 else if (GetSymbol() == "/NQ") then 12.5
 else 1;

def entryPrice = EntryPrice();

def high_ref = if IsNaN(entryPrice[1]) then
 EntryPrice()
 else if !IsNaN(entryPrice[0]) then
 Max(high, high_ref[1])
 else EntryPrice();

def low_ref = if IsNaN(entryPrice[1]) then
 EntryPrice()
 else if !IsNaN(entryPrice[0]) then
 Min(low, low_ref[1])
 else EntryPrice();

def long_trail_stop_price = high_ref - trail_loss;
def short_trail_stop_price = low_ref + trail_loss;

AddOrder(OrderType.SELL_TO_CLOSE, t_target == 1 and
    low <= long_trail_stop_price, price = long_trail_stop_price, name = "Trailing Stop", arrowcolor = Color.RED);

AddOrder(OrderType.BUY_TO_CLOSE, t_target == 1 and
    high >= short_trail_stop_price, price = short_trail_stop_price, name = "Trailing Stop", arrowcolor = Color.GREEN);

################################## END TRAILING STOP  #########################################


##############################################################
#######################  Strategy Logic  #####################
###################   To Enter Position  #####################
##############################################################

################ Price cross SMA #############################
input price = close;
input smalength = 20;
input averageType = AverageType.SIMPLE;
plot smalength1 = MovingAverage(averageType, price, smalength);
smalength1.SetDefaultColor(Color.YELLOW);


###################### Average volume #######################
# 1 day is 96 15 min periods, 10 days about 1000

input vollength = 1000;

def Vol = volume;
def VolAvg = Average(volume, vollength);




#########################################################
############## Entry orders #############################
#########################################################

AddOrder(OrderType.BUY_TO_OPEN,
 price > smalength1 and
 #vol > volavg and

 open_longs == 1 and
 min_until_close > marketCloseBuffer and
 min_from_open > marketOpenBuffer,
 price = open[-1],
 tradeSize = orderSize,
 name = "Long Open",
 arrowcolor = color.light_green);



############### SELL #################################

AddOrder(OrderType.SELL_TO_OPEN, 
price < smalength1 and
#vol > volavg and

 open_shorts == 1 and
 min_until_close > marketCloseBuffer and
 min_from_open > marketOpenBuffer, price = open[-1], tradeSize = orderSize, name = "Short Open", arrowcolor = Color.LIGHT_RED);



################################## END SCRIPT  ################################################